"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = require("express");
const CreateUserController_1 = require("./controllers/user/CreateUserController");
const AuthUserController_1 = require("./controllers/user/AuthUserController");
const DetailUserController_1 = require("./controllers/user/DetailUserController");
const isAuthenticated_1 = require("./middlewares/isAuthenticated");
const CreateClientController_1 = require("./controllers/client/CreateClientController");
const ListClientController_1 = require("./controllers/client/ListClientController");
const CreateAgendaController_1 = require("./controllers/agenda/CreateAgendaController");
const ListAgendaController_1 = require("./controllers/agenda/ListAgendaController");
const CreateCaixaController_1 = require("./controllers/caixa/CreateCaixaController");
const ListCaixaController_1 = require("./controllers/caixa/ListCaixaController");
const ListNameCaixaController_1 = require("./controllers/caixa/ListNameCaixaController");
const ListRelatorioController_1 = require("./controllers/caixa/ListRelatorioController");
const ListProximaController_1 = require("./controllers/agenda/ListProximaController");
const UpdateClientController_1 = require("./controllers/client/UpdateClientController");
const DeleteClientController_1 = require("./controllers/client/DeleteClientController");
const DeleteAgendaController_1 = require("./controllers/agenda/DeleteAgendaController");
const ListAtrasadosController_1 = require("./controllers/caixa/ListAtrasadosController");
const DetailClientController_1 = require("./controllers/client/DetailClientController");
const LastCaixaController_1 = require("./controllers/caixa/LastCaixaController");
const UpdateUserPasswordController_1 = require("./controllers/user/UpdateUserPasswordController");
const ListUserController_1 = require("./controllers/user/ListUserController");
const router = (0, express_1.Router)();
exports.router = router;
router.post('/users', isAuthenticated_1.isAuthenticated, new CreateUserController_1.CreateUserController().handle);
router.post('/session', new AuthUserController_1.AuthUserController().handle);
router.get('/me', isAuthenticated_1.isAuthenticated, new DetailUserController_1.DetailUserController().handle);
router.put("/users/:userId/password", isAuthenticated_1.isAuthenticated, new UpdateUserPasswordController_1.UpdateUserPasswordController().handle);
router.get('/userlist', isAuthenticated_1.isAuthenticated, new ListUserController_1.ListUserController().handle);
router.post('/client', isAuthenticated_1.isAuthenticated, new CreateClientController_1.CreateClientController().handle);
router.get('/clientlist', isAuthenticated_1.isAuthenticated, new ListClientController_1.ListClientController().handle);
router.put('/client/update/:id', isAuthenticated_1.isAuthenticated, new UpdateClientController_1.UpdateClientController().handle);
router.get('/client/detail/:id', isAuthenticated_1.isAuthenticated, new DetailClientController_1.DetailClientController().handle);
router.delete('/client/:id', isAuthenticated_1.isAuthenticated, new DeleteClientController_1.DeleteClientController().handle);
router.post('/agenda', isAuthenticated_1.isAuthenticated, new CreateAgendaController_1.CreateAgendaController().handle);
router.get('/agendalist', isAuthenticated_1.isAuthenticated, new ListAgendaController_1.ListAgendaController().handle);
router.get('/agenda/proximas', isAuthenticated_1.isAuthenticated, new ListProximaController_1.ListProximaController().handle);
router.delete('/agenda/:id', isAuthenticated_1.isAuthenticated, new DeleteAgendaController_1.DeleteAgendaController().handle);
router.post('/lancamento', isAuthenticated_1.isAuthenticated, new CreateCaixaController_1.CreateCaixaController().handle);
router.get('/caixalist', isAuthenticated_1.isAuthenticated, new ListCaixaController_1.ListCaixaController().handle);
router.get('/caixa/atrasados', isAuthenticated_1.isAuthenticated, new ListAtrasadosController_1.ListAtrasadosController().handle);
router.get('/caixa/name', isAuthenticated_1.isAuthenticated, new ListNameCaixaController_1.ListNameCaixaController().handle);
router.get('/caixa/relatorio', isAuthenticated_1.isAuthenticated, new ListRelatorioController_1.ListRelatorioController().handle);
router.get('/caixa/latest/:id', isAuthenticated_1.isAuthenticated, new LastCaixaController_1.LastCaixaController().handle);
